input CreateMyModelTypeInput {
	title: String
}

input DeleteMyModelTypeInput {
	id: ID!
}

type Mutation {
	createMyModelType(input: CreateMyModelTypeInput!): MyModelType
	updateMyModelType(input: UpdateMyModelTypeInput!): MyModelType
	deleteMyModelType(input: DeleteMyModelTypeInput!): MyModelType
}

type MyModelType {
	id: ID!
	title: String
}

type MyModelTypeConnection {
	items: [MyModelType]
	nextToken: String
}

type Query {
	getMyModelType(id: ID!): MyModelType
	listMyModelTypes(filter: TableMyModelTypeFilterInput, limit: Int, nextToken: String): MyModelTypeConnection
	getLeftModelType(id: ID!): MyModelType
	getRightModelType(id: ID!): MyModelType
}



type Subscription {
	onCreateMyModelType(id: ID, title: String): MyModelType
		@aws_subscribe(mutations: ["createMyModelType"])
	onUpdateMyModelType(id: ID, title: String): MyModelType
		@aws_subscribe(mutations: ["updateMyModelType"])
	onDeleteMyModelType(id: ID, title: String): MyModelType
		@aws_subscribe(mutations: ["deleteMyModelType"])
}

input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

input TableMyModelTypeFilterInput {
	id: TableIDFilterInput
	title: TableStringFilterInput
}

input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

input UpdateMyModelTypeInput {
	id: ID!
	title: String
}